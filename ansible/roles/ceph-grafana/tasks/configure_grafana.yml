---
- name: Start Grafana
  service:
    name: grafana-server
    state: started
    enabled: true

- name: Write grafana.ini
  copy:
    src: files/grafana.ini
    dest: /etc/grafana/grafana.ini
    owner: root
    group: grafana
    mode: 0640
  tags: [ini]
  notify: Restart Grafana

- name: Set domain in grafana.ini
  lineinfile:
    dest: /etc/grafana/grafana.ini
    regexp: "^domain = .*"
    insertafter: "^;domain = .*"
    line: "domain = {{ ansible_fqdn }}"
  tags: [ini]
  notify: Restart Grafana

- meta: flush_handlers

- name: Wait for grafana to start
  wait_for:
    port: 3000

- set_fact:
    grafana_data_source: >
      {
        "name":"{{ graphite.grafana_name }}",
        "type":"graphite",
        "url":"http://localhost:{{ graphite.port }}",
        "access":"proxy",
        "basicAuth":false,
        "isDefault":true
      }

- name: Add data source
  uri:
    url: http://localhost:3000/api/datasources
    method: POST
    user: "{{ graphite.user }}"
    password: "{{ graphite.password }}"
    force_basic_auth: yes
    body_format: json
    body: "{{ grafana_data_source }}"
    # If we get a 409 Conflict, it means we're already set up. We'll update
    # after this.
    status_code: 200,409
  register: grafana_data_source_result

- name: Get datasource ID
  uri:
    url: "http://localhost:3000/api/datasources/id/{{ graphite.grafana_name }}"
    method: GET
    user: "{{ graphite.user }}"
    password: "{{ graphite.password }}"
    force_basic_auth: yes
  register: grafana_data_source_id
  when: grafana_data_source_result is defined and grafana_data_source_result.status == 409

- name: Update datasource
  uri:
    url: "http://localhost:3000/api/datasources/{{ grafana_data_source_id.json.id }}"
    method: PUT
    user: "{{ graphite.user }}"
    password: "{{ graphite.password }}"
    force_basic_auth: yes
    body_format: json
    body: "{{ grafana_data_source }}"
    status_code: 200
  when: grafana_data_source_result is defined and grafana_data_source_result.status == 409

- include: grafana_plugins.yml
  when: devel_mode

- name: Ship dashboard templates
  copy:
    src: files/dashboards
    dest: /tmp/
  when: devel_mode

- name: Ship dashUpdater.py
  copy:
    src: files/dashUpdater.py
    dest: /tmp/dashUpdater.py
  when: devel_mode

- name: Write dashboard.yml
  template:
    src: dashboard.yml
    dest: /tmp/dashboard.yml

- name: Push dashboards to Grafana
  command: python /tmp/dashUpdater.py -c /tmp/dashboard.yml -D /tmp/dashboards
  when: devel_mode

- name: Push dashboards to Grafana
  command: /usr/libexec/cephmetrics/dashUpdater.py -c /tmp/dashboard.yml -D /usr/share/cephmetrics/dashboards
  when: not devel_mode
